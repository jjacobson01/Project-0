Pointers in C
-------------

1) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *temp;
  strcpy(temp, argv[0]);
  return 0;
}

Why is the above code incorrect (i.e., likely to crash)?
Should crash because temp is not initialized.

2) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char temp[9];
  strcpy(temp, argv[0]);
  return 0;
}

A buffer overflow occurs when the program name is 9 characters long
(e.g., "12345.exe"). Why?
If temp receives 9 characters total then it the null character at the end of the string(10th position) will not be allocated
and will cause a buffer overflow.

3) Consider the following C program.
#include <string.h>
int main(int argc, char *argv[])
{
  char *buffer = "Hello";
  strcpy(buffer, "World");
  return 0;
}

Why does this program crash?
buffer variable is being overridden but the memory is constant so it causes a crash.

4) Consider the following C snippet.
void myfunc()
{
  char b[100];
  char *buffer = &b[0];
  strcpy(buffer, "World");
}

Is this correct?  What's a simpler expression for &b[0]?
it works but as impler expression would be:
char *buffer = b;

5) Consider the following C program.
#include <stdio.h>
int main(int argc, char* argv[])
{
  printf("%s %s %s\n", *argv, (*(argv+1)) + 2, *(argv+2));
  return 0;
}

If this code is executed using the following line, what will be the output?
> program1 -n5 abc
output: ./main ogram1 -n5


6) Consider the following C program.
#include <stdio.h>
#include <string.h>
char *myfunc(char **argv)
{
  char buffer[100];
  strcpy(buffer, "hello");
  return buffer;
}
int main(int argc, char *argv[])
{
  char *s = myfunc(argv);
  printf("%s\n", s);
}

What's wrong with this?
It seems to work but it will end up returning the address location of the variable 
instead of the value of the variable.
